grammar SQL extends SQLBase.

# This is a grammar targeted at SQL statements which are embedded in Cobol
# code. The rules assume they are always parsing a single SQL statement,
# and will eat any remaining unidentified tokens as 'unknown'.
#
# I'm trying to set up the rules quite defensively to eat anything unknown.
# Partly because the SQL grammar in itself is quite extensive and will take
# some time to flesh out. But also because my set of samples to test against
# is quite limited.
#
# I'm mostly basing this off [SQL-2003 BNF]. 

def sqlStatement =
    ( includeStatement
    | declareSessionStatement
    | declareCursorStatement
    | selectStatement
    | insertStatement
    | updateStatement
    | deleteStatement
    | openStatement
    | closeStatement
    | rollbackStatement
    | lockTableStatement
    
    | alterStatement
    | createStatement
    | dropStatement
    | renameStatement
    )
end

def includeStatement =
    INCLUDE identifier
end

def declareSessionStatement =
    DECLARE SESSION . identifier
    TABLE
    [unknown: --> eof]
end

def declareCursorStatement =
    DECLARE cursorName [sensitivity] [scrollability] CURSOR

    [holdability]
    [returnability]

    FOR queryExpression [orderBy] [updatability]
    
    [unknown: --> eof]
    
  where def sensitivity     =  (SENSITIVE | INSENSITIVE | ASENSITIVE)     end
  where def scrollability   =  (SCROLL | NO SCROLL)                       end
  where def holdability     =  (WITH HOLD | WITHOUT HOLD)                 end
  where def returnability   =  (WITH RETURN | WITHOUT RETURN)             end
  where def queryExpression =  unknown                                    end
  where def orderBy         =  ORDER BY unknown                           end
  where def updatability    =  FOR ( READ ONLY | UPDATE [ OF unknown ] )  end

  where def unknown =  --> ( ORDER BY | FOR | eof )  end 
end

def selectStatement =
    SELECT
    [setQuantifier]
    selectList
    [into]
    from              [ unknown: --> WHERE ]
    [`where]          [ unknown: --> eof ]

  where def setQuantifier =  ( distinct: DISTINCT | all: ALL )  end
  
  where def selectList =
      (sublist (',' sublist)*) %upto { (INTO | FROM) }
      
    where private def sublist =
      ( aggregateFunction
      | unknown: _+
      ) %upto { ',' }
    end
  end

  where def into =
      INTO 
      (target (',' target)*) %upto { FROM }
      
    where private def target =
      ( hostParameterSpecification
      | unknown: _+
      ) %upto { ',' }
    end
  end

  where def from =  FROM  tableReferenceList  [unknown: --> nextBlockOrEnd]  end

  where def `where =
      WHERE
      ( searchCondition
      | unknown : _*
      ) %upto { nextBlockOrEnd }
  end

  where private def nextBlockOrEnd =
      ( FROM | WHERE | GROUP BY | HAVING | WINDOW | eof )
  end 
end

def insertStatement =
    INSERT INTO tableName
    [unknown: --> eof]
end

def updateStatement =
    UPDATE targetTable
    set
    [`where]
    [unknown: --> eof]

  where def set =  SET (unknown: --> (WHERE | eof))  end

  where def `where =
     WHERE
     ( CURRENT OF cursorName
     | ( searchCondition
       | unknown : _*
       ) %upto { eof }
     )
  end
end

def deleteStatement = 
    DELETE FROM targetTable
    [--> eof]
end

def openStatement =
    OPEN cursorName [inputUsing]
    
  where def inputUsing =  [USING (unknown: --> eof)]  end
end

def closeStatement =
    CLOSE cursorName
end

def rollbackStatement =
    ROLLBACK
end

def lockTableStatement =
    LOCK TABLE tableName

    [unknown: --> eof]
end

## ############################################################################
## Data Definition Language Statements
## ----------------------------------------------------------------------------

def alterStatement =
    ALTER
    [ subject :
      ( DATABASE                                     # [IBM DB2 SQL Statements]
      | DOMAIN
      | INDEX                                        # [IBM DB2 SQL Statements]
      | [SPECIFIC] FUNCTION                          # [IBM DB2 SQL Statements]
      | MASK                                         # [IBM DB2 SQL Statements]
      | PERMISSION                                   # [IBM DB2 SQL Statements]
      | PROCEDURE                                    # [IBM DB2 SQL Statements]
      | SEQUENCE
      | STOGROUP                                     # [IBM DB2 SQL Statements]
      | TABLE
      | TABLESPACE                                   # [IBM DB2 SQL Statements]
      | (TRANSFORM | TRANSFORMS)
      | TRIGGER                                      # [IBM DB2 SQL Statements]
      | TRUSTED CONTEXT                              # [IBM DB2 SQL Statements]
      | VIEW                                         # [IBM DB2 SQL Statements]
      | SESSION                                      # IBM, Oracle
      )
    ]

    [unknown: --> eof]
end


def createStatement =
    CREATE
    [ subject :
      ( [PUBLIC] ALIAS                                # [IBM DB2 SQL Statements]
      | ASSERTION
      | CAST
      | CHARACTER SET
      | COLLATION
      | DATABASE                                      # [IBM DB2 SQL Statements]
      | DOMAIN
      | FUNCTION
      | [UNIQUE [WHERE NOT NULL]]
         INDEX                                        # [IBM DB2 SQL Statements]
      | MASK                                          # [IBM DB2 SQL Statements]
      | [ INSTANCE
        | STATIC
        | CONSTRUCTOR
        ]
        METHOD
      | ORDERING
      | PERMISSION                                    # [IBM DB2 SQL Statements]
      | PROCEDURE
      | ROLE
      | SCHEMA
      | SEQUENCE
      | SPECIFIC METHOD
      | STOGROUP                                      # [IBM DB2 SQL Statements]
      | SYNONYM                                       # [IBM DB2 SQL Statements]
      | [ (GLOBAL | LOCAL) TEMPORARY
        | AUXILIARY                                   # [IBM DB2 SQL Statements]
        | AUX                                         # [IBM DB2 SQL Statements]
        ] 
        TABLE
      | [LOB]
        TABLESPACE                                    # [IBM DB2 SQL Statements]
      | (TRANSFORM | TRANSFORMS)
      | TRANSLATION
      | TRIGGER
      | TRUSTED CONTEXT                               # [IBM DB2 SQL Statements]
      | TYPE
      | VARIABLE                                      # [IBM DB2 SQL Statements]
      | [RECURSIVE] VIEW
      )
    ]

    [unknown: --> eof]
end


def dropStatement =
    DROP
    [ subject :
      ( [PUBLIC] ALIAS                               # [IBM DB2 SQL Statements]
      | CONSTRAINT
      | DATABASE                                     # [IBM DB2 SQL Statements]
      | [SPECIFIC] FUNCTION                          # [IBM DB2 SQL Statements]
      | INDEX                                        # [IBM DB2 SQL Statements]
      | MASK                                         # [IBM DB2 SQL Statements]
      | PACKAGE                                      # [IBM DB2 SQL Statements]
      | PERMISSION                                   # [IBM DB2 SQL Statements]
      | PROCEDURE                                    # [IBM DB2 SQL Statements]
      | ROLE                                         # [IBM DB2 SQL Statements]
      | SCHEMA
      | SEQUENCE                                     # [IBM DB2 SQL Statements]
      | STOGROUP                                     # [IBM DB2 SQL Statements]
      | SYNONYM                                      # [IBM DB2 SQL Statements]
      | TABLE
      | TABLESPACE                                   # [IBM DB2 SQL Statements]
      | TRIGGER                                      # [IBM DB2 SQL Statements]
      | TRUSTED CONTEXT                              # [IBM DB2 SQL Statements]
      | TYPE                                         # [IBM DB2 SQL Statements]
      | VARIABLE                                     # [IBM DB2 SQL Statements]
      | VIEW
      )
    ]

    [unknown: --> eof]
end

def renameStatement =
    RENAME [TABLE | INDEX]

    [unknown: --> eof]
end

## ############################################################################
## Search conditions (top-down)
## ----------------------------------------------------------------------------

# This will split the input according to the logical combinators AND, OR and
# NOT, and grouping of these by means of parentheses.

def searchCondition =
    %balancing 
        <{ '(' } { ')' }>
        <{ '[' } { ']' }>
        <{ '{' } { '}' }>
        <{ leftBracketTrigraph } { rightBracketTrigraph }>
      disjunction
end

private def leftBracketTrigraph  =  '?' ++ ('?' '(')  end
private def rightBracketTrigraph =  '?' ++ ('?' ')')  end

hiding def disjunction =
    conjunction %upto { (or | eof) }
    (or
      conjunction %upto { (or | eof) }
    )*
    
  where private def or =  %notnested OR  end
end

hiding def conjunction =
    negation %upto { (and | eof) }
    (and
     negation %upto { (and | eof) }
    )*
    
  where private def and =  %notnested AND  end
end

hiding def negation =
    [NOT] term
end

hiding def term =
    ( '(' 
      ( 
        %balancing 
            <{ '(' } { ')' }>
            <{ '[' } { ']' }>
            <{ '{' } { '}' }>
            <{ leftBracketTrigraph } { rightBracketTrigraph }>
          ( searchCondition %upto { %notnested ')' } )
      ) 
      ')'

    | likePredicate
    | comparison
    | unknown: _*
    )
end

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# LIKE predicate (top down)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def likePredicate =
    rowValuePredicand
    [NOT] LIKE pattern
    [escape]
    
  where def rowValuePredicand =
      (unknown: _*) %upto { [NOT] LIKE }
  end
  
  where def pattern =
      ( stringLiteral
      | unknown: _*
      ) %before { (ESCAPE | eof) }
      
      [--> (ESCAPE | eof)]
  end
  
  where def escape =
      ESCAPE (unknown: _*)
  end
end


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Comparison (top-down)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# This will split the input into two parts, separated by a comparison operator.

def comparison =
    (unknown: --> comparisonOp)
    comparisonOp
    (unknown: _+)
end

def comparisonOp =
    ( greaterThanOp
    | lessThanOrEqualsOp
    | greaterThanOrEqualsOp
    | equalsOp
    | notEqualsOp
    | lessThanOp
    )
end

def equalsOp              =  '='                                    end
def lessThanOp            =  '<'                                    end
def greaterThanOp         =  '>'                                    end
def notEqualsOp           =  ( '<' ++ '>' | '!' ++ '=' )  end
def greaterThanOrEqualsOp =  ( '>' ++ '=' | '!' ++ '<' )  end
def lessThanOrEqualsOp    =  ( '<' ++ '=' | '!' ++ '>' )  end


## ############################################################################
## Functions
## ----------------------------------------------------------------------------

# This is a very incomplete definition, so make sure call sites allow for that. 
def aggregateFunction =
    countAll
end

def countAll =
    COUNT '(' '*' ')'
end


## ############################################################################
## Host parameters
## ----------------------------------------------------------------------------

def hostParameterSpecification =
    hostParameterName [ indicator ]

  # [IBM References to host variables] details the use of indicators.
  where def indicator =
      [ INDICATOR ] hostParameterName
  end
end

def hostParameterName =  ':' ++ identifier  end


## ############################################################################
## Low level stuff.
## ----------------------------------------------------------------------------

def identifier          =  (delimitedIdentifier | regularIdentifier)  end

def regularIdentifier   =  word  end
def delimitedIdentifier =  str   end


def tableReferenceList =  tableReference (',' tableReference)*  end

# Note: this one is a huge oversimplification...
def tableReference =  tableName  end


def cursorName =
   [ module . ] identifier

  where def module =  MODULE  end
end

def tableName =
    ( catalogName . ( module | schemaName ) . identifier
    |               ( module | schemaName ) . identifier
    |                                         identifier
    )

  where def module      =  MODULE      end
  where def schemaName  =  identifier  end
  where def catalogName =  identifier  end
end

def targetTable =  ( ONLY '(' tableName ')' | tableName )   end


def stringLiteral =  str  end

private def str =
    (@STRING _)
    
    # Because of continuations, strings may be split across lines. So we need
    # to check if there are any more parts (STRINGs) following the initial one,
    # albeit without skipping whitespace.
    [++ ((@STRING _)+)]
end


private def word =
    (@WORD _) ++ (
      ( @NUMBER _
      | @WORD _
      | '_'
      )*
    )
end


# -----------------------------------------------------------------------------
#
# References
#
# [SQL-2003 BNF]
#   http://savage.net.au/SQL/sql-2003-2.bnf
#
# [IBM DB2 SQL Statements]
#   http://www.ibm.com/support/knowledgecenter/en/SSEPEK_11.0.0/com.ibm.db2z11.doc.sqlref/src/tpc/db2z_sql_statementsintro.html
#
# [IBM References to host variables]
#   http://www.ibm.com/support/knowledgecenter/ssw_ibm_i_71/db2/rbafzch2host.htm
