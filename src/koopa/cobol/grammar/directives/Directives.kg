grammar Directives extends DirectivesBase.

def directive =
    # There is some overlap between all these categories. So take the labels
    # with a grain of salt.
    ( iso         #< Though these should all have a consistent format, at least.
    | ibm
    | mf
    | listing
    )
end

## #############################################################################
## ISO Compiler Directives.
## -----------------------------------------------------------------------------

# Based on ISO/IEC 1989:20xx FCD 1.0 (E), section 7.3 "Compiler directives".
#
# "A compiler directive is composed of the compiler directive indicator,
# optionally followed by the COBOL character space, followed by
# compiler-instruction. The compiler directive indicator shall be treated
# as though it were followed by a space if no space is specified after the
# indicator."
#
# "A compiler directive shall be preceded only by zero, one, or more space
# characters."
# 
# "When the reference format is fixed-form, a compiler directive shall be
# written in the program-text area and may be followed only by space
# characters and an optional inline comment."
#
# "When the reference format is free-form, a compiler directive may be
# followed only by space characters and an optional inline comment."

def iso =
    [ sequenceNumber: @FIXED (<1..6> _)+ ]
    indicator instruction [inlineComment]

  where private def indicator =
      ( @FREE | <8.._> ) ('>' ++ '>')
  end
  
  where def instruction =
      ( else:        ELSE
      | endEvaluate: END-EVALUATE
      | endIf:       END-IF
      
      | source
      | callConvention
      | define
      | evaluate
      | when
      | flag02
      | flag85
      | flagNativeArithmetic
      | if
      | leapSecond
      | listing
      | page
      | propagate
      | checking
      
      | repository   # *MF
      
      ) %upto { (eof | inlineCommentIndicator) }
      
    where def source =
        SOURCE [FORMAT] [IS] (format: (FIXED | FREE))   # TODO VARIABLE ?
    end
    
    where def callConvention       =  CALL-CONVENTION (unknown: _+)         end
    where def define               =  DEFINE (unknown: _+)                  end
    where def evaluate             =  EVALUATE (true: TRUE | unknown: _+)   end
    where def when                 =  WHEN (unknown: _+)                    end
    where def flag02               =  (FLAG- ++ 02) (unknown: _+)           end
    where def flag85               =  (FLAG- ++ 85) (unknown: _+)           end
    where def flagNativeArithmetic =  FLAG-NATIVE-ARITHMETIC (unknown: _+)  end
    where def if                   =  IF (unknown: _+)                      end
    where def leapSecond           =  LEAP-SECOND (unknown: _+)             end
    where def listing              =  LISTING (unknown: _+)                 end
    where def page                 =  PAGE (unknown: _+)                    end
    where def propagate            =  PROPAGATE (unknown: _+)               end
    where def checking             =  TURN (unknown: _+)                    end
    
    # This one comes from MicroFocus. See [MF - Compiler Directing Statements].
    where def repository =
        REPOSITORY [UPDATE] (ON | OFF [[WITH] CHECKING])
    end
  end
end


## #############################################################################
## IBM Compiler Directives.
## -----------------------------------------------------------------------------

# See [IBM - Compiler-directing Statements].
#
# Some of these also exist in MicroFocus.
def ibm =
    ( basis         # *MF
    | process
    | control
    | delete        # *MF
    | enter
    | insert        # *MF
    | readyTrace
    | resetTrace
    
    # TODO: SERVICE LABEL ? Generated by CICS, so ignore ?
    # TODO: SERVICE RELOAD ? "has no effect on the execution of the program", so ignore ?
    )

  where def basis =
      [ (sequenceNumber: <1..6> @NUMBER _) ++ (@WHITESPACE _) ]
      BASIS anything
  end

  where def process =
      # "The first character of the sequence number must be numeric"
      [ (sequenceNumber: <1..6> @NUMBER _ (<1..6> _)*) ++ (@WHITESPACE _) ]
      (CBL | PROCESS) anything*
  end

  where def control =
      # TODO Seqnr allowed ?
      cblControl option ([','] option)* [.]
    
    where private def cblControl =  ((<7.._> '*') ++ (CBL | CONTROL))  end
    where def option =  (SOURCE | NOSOURCE | LIST | NOLIST | MAP | NOMAP)   end
  end
  
  where def delete =
      [ (sequenceNumber: <1..6> @NUMBER _) ++ (@WHITESPACE _) ]
      DELETE sequenceNumberFieldOrRange (',' sequenceNumberFieldOrRange)*

    where private def sequenceNumberFieldOrRange =
       ( sequenceNumberRange: sequenceNumberField ++ ('-' sequenceNumberField)
       | sequenceNumberField
       )
    end
  end
  
  where def enter =
      # TODO Any restrictions on positioning ?
      ENTER anything [(%not .) anything] .
  end
  
  where def insert =
      [ (sequenceNumber: <1..6> @NUMBER _) ++ (@WHITESPACE _) ]
      INSERT sequenceNumberField
  end
  
  where def readyTrace =
      # TODO Any restrictions on positioning ?
      READY TRACE .
  end
  
  where def resetTrace =
      # TODO Any restrictions on positioning ?
      RESET TRACE .
  end
  
  where def sequenceNumberField =  (@NUMBER _)  end
end


## #############################################################################
## MicroFocus Compiler Directives.
## -----------------------------------------------------------------------------

# See [MF - Compiler Directing Statements].
# Those already covered by the IBM spec will not be repeated here.

def mf =
    ( inc
    | include
    | set
    | display
    | else
    | `end
    | if
    )

  where def inc =
      ((<1..1> '-') ++ 'INC')
      anything [comment: anything*]
  end

  where def include =
      ((<8..8> '+') ++ ('+' 'INCLUDE'))
      anything [comment: anything*]
  end
  
  # [MF - $SET Statements in the Source Code]
  # [MF - Directives for Compiler]
  # [MF - Compiler Directives - Alphabetical List]
  where def set =
      (indicator ++ SET)
      ( sourceformat: SOURCEFORMAT parameter
      | directive: name [parameter]
      )+
    
    where def parameter =
      ( @STRING _
      | '(' ( (%not ')') _ )+ ')'
      )
    end
  end
  
  where def display =  (indicator ++ DISPLAY) [VCS '='] anything+  end
  where def else    =  (indicator ++ ELSE   )                      end
  where def `end    =  (indicator ++ END    )                      end
  where def if      =  (indicator ++ IF     ) (unknown: _+)        end

  # Fixed vs. free formatting is not well documented. I'm basing this off a
  # comment found in an online discussion, which stated: "When in fixed
  # format mode, the $ should be in col 7. In freeformat, this should start
  # in col 1."
  #
  # I also found something on conditional compilation by Micro Focus:
  # "Conditional compilation statements are indicated by a dollar ($) in
  # column 7 in fixed-format source, or column 1 in free-format source of the
  # COBOL source line followed by one of the key words IF, DISPLAY, ELSE, END."
  # Not sure if this also applies to "$SET".
  where def indicator =
      ((@FREE <1..1> | @FIXED <7..7> | @VARIABLE <7..7>) '$')
  end
end


## #############################################################################
## Source Listing Control Statements.
## -----------------------------------------------------------------------------

def listing =
    [ sequenceNumber: (@FIXED | @VARIABLE) (<1..6> _)+ ]
    ( eject    # *MF *IBM
    | skip     # *MF *IBM
    | title    # *MF *IBM
    )
  
  where def eject =
      # TODO Seqnr/Indicator allowed ?
      (<8.._> EJECT) [.]
  end
  
  where def skip =
      # TODO Seqnr/Indicator allowed ?
      (<8.._> (SKIP ++ (1 | 2 | 3))) [.]
  end
  
  where def title =
      # TODO Seqnr/Indicator allowed ?
      (<8.._> TITLE) anything [.]
  end
end


###############################################################################

def inlineComment                  =  inlineCommentIndicator _*  end
private def inlineCommentIndicator =  '*' ++ '>'                 end

def name     =  (@WORD _) ++ ( ( @WORD _ | @NUMBER _ )* )        end
def anything =  _ [++ ((%not @WHITESPACE _)*)]                   end



# References
#
# [IBM - Compiler-directing Statements]
#    http://publibz.boulder.ibm.com/cgi-bin/bookmgr_OS390/handheld/Connected/BOOKS/igy3lr40/8.1?SHELF=&DT=20071214160555&CASE=
#
# [MF - Compiler-directing Statements]
#   https://supportline.microfocus.com/documentation/books/sx40/lrcomp.htm
# [MF - $SET Statements in the Source Code]
#   http://documentation.microfocus.com/help/index.jsp?topic=%2Fcom.microfocus.eclipse.infocenter.studee60ux%2FHHBUCHCOMP08.html
# [MF - Directives for Compiler]
#   https://supportline.microfocus.com/documentation/books/sx2011sp1/cyadir.htm
# [MF - Compiler Directives - Alphabetical List]
#   http://documentation.microfocus.com/help/index.jsp?topic=%2FGUID-0E0191D8-C39A-44D1-BA4C-D67107BAF784%2FHRCDRHCDIR0W.html
